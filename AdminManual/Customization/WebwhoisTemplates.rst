:orphan:

Webwhois Django Templates
-------------------------

This section explains the basics of Django templates and gives a reference of
the contexts that are passed to the webwhois templates by default.

You can find the templates in :file:`webwhois/templates`
of the :program:`fred-webwhois` app.

.. rubric:: Templating basics

A resulting site is rendered from a *template* and a *context*.
A context is a dictionary of keys and values that are passed to a template from a view.
Context values can be accessed in templates by using context keys as variable names.

The basic components of the *Django template system* allow you to:

* Output a value of a variable

  .. code-block:: django
     :caption: Django templating example: Variable

     My first name is {{ first_name }}.

* Control the flow

  .. code-block:: django
     :caption: Django templating example: Conditional expression

     {% if user.is_authenticated %}Hello, {{ user.username }}.{% endif %}

* Define (or override) a block

  .. code-block:: django
     :caption: Django templating example: Block definition

     {% block main_content %}
        <p>Some main content here.</p>
     {% endblock %}

* Include a partial template

  .. code-block:: django
     :caption: Django templating example: Inclusion

     {% include "webwhois/public_request_form_menu.html" with pubreq_selected_menu="personal_info" %}

* Extend a template

  .. code-block:: django
     :caption: Django templating example: Extension

     {% extends template_name %}

     {# Here you can override some blocks. And this is a line comment. #}

* And more.

See `Django 1.11: Template language reference
<https://docs.djangoproject.com/en/1.11/ref/templates/language/>`_.

.. _basic-context:

.. rubric:: Basic context

The reference below mentions only template context that is added by specific
webwhois class-based views.

The template context contains also items that are generated by the super classes,
from which the webwhois views inherit, such as generic views and context mixins.

The template context of all class-based generic views include a ``view`` variable
that points to the :py:class:`View` instance. This allows you to access attributes
of the view in the template, such as :samp:`view.{attribute_name}`.

For information on context inherited from Django class-based views, see
`Django 1.11: Built-in class-based views API reference
<https://docs.djangoproject.com/en/1.11/ref/class-based-views/>`_.

.. contents:: Template reference
   :local:
   :backlinks: none
   :depth: 1

.. _custom-web-template-base:

Base template
^^^^^^^^^^^^^^

The default base-template name is ``base_site_example.html``,
but changing it is complicated, therefore we recommend to use the default name.

.. _custom-web-template-error:

Server exceptions template
^^^^^^^^^^^^^^^^^^^^^^^^^^

The template used to render errors.

Template name: ``webwhois/server_exception.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``handle`` -- The handle, which a user has entered in the search form.
* ``managed_zone_list`` -- A list of zones managed by the Registry.
  (Available only with the ``server_exception.unmanaged_zone`` error.)
* ``server_exception.code`` -- A code of the error.
  (Avalable only with some errors.)
* ``server_exception.title`` -- A title of the error.
* ``server_exception.message`` -- An error message.
* Exception typing:
   * ``server_exception.handle_is_in_zone`` -- ``True`` if
     the user-provided handle is recognized as a valid domain name
     but does not match any record.
   * ``server_exception.too_many_parts_in_domain_name`` -- ``True`` if
     the user-provided handle is recognized as a domain name
     but has more parts than are managed by the Registry.
   * ``server_exception.unmanaged_zone`` -- ``True`` if
     the user-provided handle is recognized as a domain name
     but is not in any zone managed by the Registry (wrong TLD).
   * ``server_exception.object_not_found`` -- ``True`` if
     the user-provided handle was not found in the Registry.

This template is rendered by :py:class:`.RegistryObjectMixin`.

.. _custom-web-template-whois:

Templates for whois lookup
^^^^^^^^^^^^^^^^^^^^^^^^^^^

This section covers a set of templates for whois lookup and results.

.. contents:: Templates for whois lookup
   :local:
   :backlinks: none

.. _custom-web-template-whois-form:

Search form template
~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/form_whois.html``

Default additional context (see also :ref:`basic context <basic-context>`): None additional.

This template is rendered by :py:class:`.WhoisFormView`.

.. _custom-web-template-whois-multiple:

Multiple-entries result template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/multiple_entries.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``handle`` -- The handle, which a user has entered in the search form.
* ``registry_objects.contact.*`` -- Same structure as in :ref:`custom-web-template-whois-contact`.
* ``registry_objects.domain.*`` -- Same structure as in :ref:`custom-web-template-whois-domain`.
* ``registry_objects.nsset.*`` -- Same structure as in :ref:`custom-web-template-whois-nsset`.
* ``registry_objects.keyset.*`` -- Same structure as in :ref:`custom-web-template-whois-keyset`.
* ``registry_objects.registrar.*`` -- Same structure as in :ref:`custom-web-template-registrar-detail`.

This template is rendered by :py:class:`.ResolveHandleTypeView`.

.. _custom-web-template-whois-contact:

Contact details template
~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/contact.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``handle`` -- A contact handle.
* ``registry_objects.contact.detail`` -- A CORBA object with contact data,
  see ``Contact`` structure in Whois2.idl_.
* ``registry_objects.contact.birth_date`` -- A contact birth date.
* ``registry_objects.contact.status_descriptions`` -- List of contact status labels.
  Verification statuses are excluded.
* ``registry_objects.contact.verification_status`` -- List of verification statuses.
  Each member has the following keys:

   * ``code`` -- Status code
   * ``label`` -- Status label
   * ``icon`` -- Path to a status icon

* ``registry_objects.contact.is_linked`` -- Whether a contact is linked to another object in the Registry.
* ``registry_objects.contact.creating_registrar`` -- The creating registrar -- a CORBA object
  with registrar data, see ``Registrar`` structure in Whois2.idl_.
* ``registry_objects.contact.sponsoring_registrar`` -- The current sponsoring registrar -- a CORBA object
  with registrar data, see ``Registrar`` structure in Whois2.idl_.
* ``object_delete_candidate`` -- Whether the contact is in delete candidate status.

This template is rendered by :py:class:`.ContactDetailView`.

.. _custom-web-template-whois-domain:

Domain details template
~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/domain.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``handle`` -- A domain handle.
* ``registry_objects.domain.detail`` -- A CORBA object with domain data,
  see ``Domain`` structure in Whois2.idl_. If the domain has delete candidate status,
  it is ``None``.
* ``registry_objects.domain.status_descriptions`` -- List of domain status labels.
* ``registry_objects.domain.registrant`` -- The domain holder -- CORBA object
  with contact data, see ``Contact`` structure in Whois2.idl_.
* ``registry_objects.domain.registrar`` -- The current sponsoring registrar -- a CORBA object
  with registrar data, see ``Registrar`` structure in Whois2.idl_.
* ``registry_objects.domain.admins`` -- List of domain's administrative contacts.
  Each member is a CORBA object with contact data, see ``Contact`` structure in Whois2.idl_.
* ``registry_objects.domain.nsset`` -- Domain's nsset -- a CORBA object with nsset data,
  see ``NSSet`` structure in Whois2.idl_.
* ``registry_objects.domain.keyset`` -- Domain's keyset -- a CORBA object with keyset data,
  see ``KeySet`` structure in Whois2.idl_.
* ``object_delete_candidate`` -- Whether the domain is in delete candidate status.
* ``DNSSEC_URL`` -- Value of ``WEBWHOIS_DNSSEC_URL`` setting.

This template is rendered by :py:class:`.DomainDetailView`.

.. _custom-web-template-whois-nsset:

Nsset details template
~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/nsset.html`` + includes ``webwhois/nsset_detail.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``handle`` -- A nsset handle.
* ``registry_objects.nsset.detail`` -- A CORBA object with nsset data,
  see ``NSSet`` structure in Whois2.idl_.
* ``registry_objects.nsset.status_descriptions`` -- List of nsset status labels.
* ``registry_objects.nsset.registrar`` -- The sponsoring registrar -- a CORBA object
  with registrar data, see ``Registrar`` structure in Whois2.idl_.
* ``registry_objects.nsset.admins`` -- List of technical contacts.
  Each member is a CORBA object with contact data, see ``Contact`` structure in Whois2.idl_.
* ``object_delete_candidate`` -- Whether the nsset is in delete candidate status.

This template is rendered by :py:class:`.NssetDetailView`.

.. _custom-web-template-whois-keyset:

Keyset details template
~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/keyset.html`` + includes ``webwhois/keyset_detail.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``handle`` -- A keyset handle.
* ``registry_objects.keyset.detail`` -- A CORBA object with keyset data,
  see ``KeySet`` structure in Whois2.idl_.
* ``registry_objects.keyset.status_descriptions`` -- List of keyset status labels.
* ``registry_objects.keyset.registrar`` -- The sponsoring registrar -- a CORBA object
  with registrar data, see ``Registrar`` structure in Whois2.idl_.
* ``registry_objects.keyset.admins`` -- List of technical contacts.
  Each member is a CORBA object with contact data, see ``Contact`` structure in Whois2.idl_.
* ``object_delete_candidate`` -- Whether the keyset is in delete candidate status.

This template is rendered by :py:class:`.KeysetDetailView`.

.. _custom-web-template-registrar:

Templates for registrar listing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This section covers a set of templates for registrar listing.

.. contents:: Templates for registrar listing
   :local:
   :backlinks: none

.. _custom-web-template-registrar-list:

A list of registrars template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/registrar_list.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``groups`` -- Mapping of all registrar groups.
* ``registrars`` -- List of registrar context objects. Each object has following keys:
   * ``registrar`` -- A CORBA object
     with registrar data, see ``Registrar`` structure in Whois2.idl_.
   * ``cert`` -- Certification object.
   * ``score`` -- Certification score.
   * ``stars`` -- Range of certification score.
* ``is_retail`` -- Denotes whether a list of registrars was filtered to retail or wholesale registrars:
   * ``None`` if not using the retail/wholesale filtering,
   * ``True`` if only retail registrars are displayed,
   * ``False`` if only wholesale registrars are displayed.

  .. deprecated:: 1.15

     Will be removed in 1.16. Use ``group_name`` instead.

This template is rendered by :py:class:`.RegistrarListView`.

.. attributes of the view: group_name, is_retail

.. _custom-web-template-registrar-detail:

Registrar details template
~~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/registrar.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``registry_objects.registrar.detail`` -- A CORBA object with registrar data,
  see ``Registrar`` structure in Whois2.idl_.

This template is rendered by :py:class:`.RegistrarDetailView`.

.. _custom-web-templates-pr:

Templates for public requests
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This section covers a set of templates for submission of :term:`public request`\
s and according responses.

.. contents:: Templates for public requests
   :local:
   :backlinks: none

.. _custom-web-templates-pr-authinfo:

Request forms -- Send authorization information template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/form_send_password.html`` + includes ``webwhois/public_request_form_menu.html``

Default additional context (see also :ref:`basic context <basic-context>`): None additional.

This template is rendered by :py:class:`.SendPasswordFormView`.

.. _custom-web-templates-pr-personinfo:

Request forms -- Send personal information template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/form_personal_info.html`` + includes ``webwhois/public_request_form_menu.html``

Default additional context (see also :ref:`basic context <basic-context>`): None additional.

This template is rendered by :py:class:`.PersonalInfoFormView`.

.. _custom-web-templates-pr-lock:

Request forms -- Lock an object template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/form_block_object.html`` + includes ``webwhois/public_request_form_menu.html``

Default additional context (see also :ref:`basic context <basic-context>`): None additional.

This template is rendered by :py:class:`.BlockObjectFormView`.

.. _custom-web-templates-pr-unlock:

Request forms -- Unlock an object template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/form_unblock_object.html`` + includes ``webwhois/public_request_form_menu.html``

Default additional context (see also :ref:`basic context <basic-context>`): None additional.

This template is rendered by :py:class:`.UnblockObjectFormView`.

.. _custom-web-templates-pr-unknown:

Responses -- Unknown public response template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returned when a link to a public request is no longer valid (e.g. an outdated request).

Template name: ``webwhois/public_request_response_not_found.html``

Default additional context (see also :ref:`basic context <basic-context>`): None additional.

This template is rendered by :py:class:`.PublicResponseNotFoundView`.

.. _custom-web-templates-pr-response-common:

Public response data
~~~~~~~~~~~~~~~~~~~~

Default additional context common to the following templates:

* ``public_response`` -- A public response object.
   * ``object_type`` -- A type of the :term:`registrable object` in question.
   * ``public_request_id`` -- An identifier of the public request.
   * ``handle`` -- The handle of the :term:`registrable object`.
   * ``request_type`` - A type of the public request.
   * ``confirmation_method`` - Confirmation method used.
   * ``create_date`` - Public request create date.

This template is rendered by :py:class:`.BaseResponseTemplateView`.

.. _custom-web-templates-pr-emailregistry:

Responses -- Public response with an answer sent to an email in the Registry template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/public_request_email_in_registry.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``public_response`` -- A :ref:`public response
  <custom-web-templates-pr-response-common>` object.
* ``text_title`` -- A page title.
* ``text_header`` -- A page header.
* ``text_content`` -- A page content.

This template is rendered by :py:class:`.EmailInRegistryView`.

.. _custom-web-templates-pr-emailcustom:

Responses -- Public response with an answer sent to a custom email template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/public_request_custom_email.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``public_response`` -- A :ref:`public response
  <custom-web-templates-pr-response-common>` object.
* ``text_title`` -- A page title.
* ``text_header`` -- A page header.
* ``text_subject`` -- The email subject.
* ``text_content`` -- The email body content.

This template is rendered by :py:class:`.CustomEmailView`.

.. _custom-web-templates-pr-notarized:

Responses -- Public response confirmed with a notarized letter template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Template name: ``webwhois/public_request_notarized_letter.html``

Default additional context (see also :ref:`basic context <basic-context>`):

* ``public_response`` -- A :ref:`public response
  <custom-web-templates-pr-response-common>` object.
* ``text_title`` -- A page title.
* ``notarized_letter_pdf_url`` -- The URL of the PDF file with the notarized letter.
* ``pdf_name`` -- The name of the PDF file.

This template is rendered by :py:class:`.NotarizedLetterView`.

.. _Whois2.idl: https://github.com/CZ-NIC/fred-idl/blob/master/idl/Whois2.idl

Templates inheritance diagram
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. figure:: /AdminManual/_graphics/WebwhoisTemplates.png
   :alt: Textual description in PlantUML is in the source file
         /AdminManual/Customization/WebwhoisTemplates.puml

   Templates inheritance diagram
