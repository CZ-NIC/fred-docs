
.. index::
   pair: create; contact

Create contact
==============

A contact create :ref:`command <struct-command>` is used to register a new contact.

The contact create command is a ``create`` element in the ``contact`` namespace
(``http://www.nic.cz/xml/epp/contact-1.6``).

The command must be contained in the ``<create>`` command type.

.. index:: Ⓔcreate, Ⓔid, ⒺpostalInfo, Ⓔname, Ⓔorg, Ⓔaddr, Ⓔstreet,
   Ⓔcity, Ⓔsp, Ⓔpc, Ⓔcc, Ⓔvoice, Ⓔfax, Ⓔemail, ⒺauthInfo,
   Ⓔdisclose, Ⓔvat, Ⓔident, ⒺnotifyEmail, ⓐtype, ⓐflag

Command element structure
-------------------------

The ``<contact:create>`` element must declare the ``contact`` :doc:`namespace
and schema </EPPReference/SchemasNamespaces/index>`, and it must contain
the following child elements:

* ``<contact:id>`` **(1)** – the contact handle as :term:`fredcom:objIDCreateType`.
* ``<contact:postalInfo>`` **(1)** – contact's postal information:
   * ``<contact:name>`` **(1)** – personal name as :term:`contact:postalLineType`,
   * ``<contact:org>`` **(0..1)** – organization name as :term:`contact:optPostalLineType`,
   * ``<contact:addr>`` **(1)** – address:
      * ``<contact:street>`` **(1..3)** – street line 1–3 as :term:`contact:optPostalLineType`,
      * ``<contact:city>`` **(1)** – city as :term:`contact:postalLineType`,
      * ``<contact:sp>`` **(0..1)** – state or province as :term:`contact:optPostalLineType`,
      * ``<contact:pc>`` **(1)** – postal code as :term:`contact:pcType`,
      * ``<contact:cc>`` **(1)** – country code as :term:`contact:ccType`,
* ``<contact:voice>`` **(0..1)** – phone number as :term:`contact:e164StringType`,
* ``<contact:fax>`` **(0..1)** – fax number as :term:`contact:e164StringType`,
* ``<contact:email>`` **(1)** – email address(es) as :term:`contact:emailCommaListType`,
* ``<contact:authInfo>`` **(0..1)** – authorization information (transfer password) as :term:`fredcom:authInfoType`; if omitted, the password will be generated by the server,
* ``<contact:disclose>`` **(0..1)** – contact information disclosure settings:
   * ``@flag`` **(R)** – disclose flag as a :term:`xs:boolean`: ``0`` – hide listed items, ``1`` – publish listed items,
   * ``<contact:voice/>`` **(0..1)** – voice disclosure setting as an empty element,
   * ``<contact:fax/>`` **(0..1)** – fax disclosure setting as an empty element,
   * ``<contact:email/>`` **(0..1)** – email disclosure setting as an empty element,
   * ``<contact:vat/>`` **(0..1)** – VAT number disclosure setting as an empty element,
   * ``<contact:ident/>`` **(0..1)** – identity document disclosure setting as an empty element,
   * ``<contact:notifyEmail/>`` **(0..1)** – notification email disclosure setting as an empty element.

   .. Note:: Omitted items will be set by the server according to its data-collection policy.

      Whether the new disclosure settings will have an effect, also depends on the server's policy.

* ``<contact:vat>`` **(0..1)** – :term:`VAT`-payer identifier as a :term:`contact:vatT`,
* ``<contact:ident>`` **(0..1)** – identity-document identification:
   * ``@type`` **(R)** – the type of the identity document
     as one of values: ``op`` (identity card number),
     ``passport`` (passport number),
     ``mpsv`` (number from the Ministry of Labour and Social Affairs),
     ``ico`` (company number), ``birthday`` (the date of birth),
   * element content: an identification number as a :term:`contact:identValueT`,
* ``<contact:notifyEmail>`` **(0..1)** – notification email address(es) as :term:`contact:emailUpdCommaListType`.

.. code-block:: xml
   :caption: Example

   <?xml version="1.0" encoding="utf-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">
      <command>
         <create>
            <contact:create xmlns:contact="http://www.nic.cz/xml/epp/contact-1.6"
             xsi:schemaLocation="http://www.nic.cz/xml/epp/contact-1.6 contact-1.6.xsd">
               <contact:id>CID-MYCONTACT</contact:id>
               <contact:postalInfo>
                  <contact:name>John Doe</contact:name>
                  <contact:org>Company X Ltd.</contact:org>
                  <contact:addr>
                     <contact:street>Street 123</contact:street>
                     <contact:city>City</contact:city>
                     <contact:pc>12300</contact:pc>
                     <contact:cc>CZ</contact:cc>
                  </contact:addr>
               </contact:postalInfo>
               <contact:voice>+420.222123456</contact:voice>
               <contact:email>john@doe.cz</contact:email>
               <contact:authInfo>trnpwd</contact:authInfo>
               <contact:disclose flag="0">
                  <contact:fax/>
                  <contact:vat/>
                  <contact:ident/>
                  <contact:notifyEmail/>
               </contact:disclose>
               <contact:vat>1312112029</contact:vat>
               <contact:notifyEmail>notify-john@doe.cz</contact:notifyEmail>
            </contact:create>
         </create>
         <clTRID>ckmf002#17-07-28at12:11:37</clTRID>
      </command>
   </epp>

.. code-block:: shell
   :caption: FRED-client equivalent

   > create_contact CID-MYCONTACT 'John Doe' john@doe.cz 'Street 123' City 12300 CZ NULL 'Company X Ltd.' trnpwd +420.222123456 NULL (y (voice, email)) 1312112029 () notify-john@doe.cz

.. index:: Ⓔmailing, Ⓔaddr

Mailing address extension
^^^^^^^^^^^^^^^^^^^^^^^^^

The ``<contact:create>`` element is used in the same way as described above.

The :ref:`command extension <command-ext>` can be used to set the mailing address
at the time of creation. Otherwise you can set the mailing address later
with the :doc:`contact:update <../Update/UpdateContact>`.

The command's ``<extension>`` element must contain a **single** ``<extra-addr:create>``
element which declares the ``extra-addr`` namespace (``http://www.nic.cz/xml/epp/extra-addr-1.0``)
and :doc:`schema </EPPReference/SchemasNamespaces/index>` and contains:

* ``<extra-addr:mailing>`` **(1)**  – mailing address container:
   * ``<extra-addr:addr>`` **(1)** – address:
      * ``<extra-addr:street>`` **(1..3)** – street line 1–3 as :term:`extra-addr:postalLineType`,
      * ``<extra-addr:city>`` **(1)** – city as :term:`extra-addr:postalLineType`,
      * ``<extra-addr:sp>`` **(0..1)** – state or province as :term:`extra-addr:postalLineType`,
      * ``<extra-addr:pc>`` **(1)** – postal code as :term:`extra-addr:pcType`,
      * ``<extra-addr:cc>`` **(1)** – country code as :term:`extra-addr:ccType`.

.. code-block:: xml
   :caption: Example

   <?xml version="1.0" encoding="utf-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">
      <command>
         <create>
            <contact:create xmlns:contact="http://www.nic.cz/xml/epp/contact-1.6"
             xsi:schemaLocation="http://www.nic.cz/xml/epp/contact-1.6 contact-1.6.xsd">
               <contact:id>CID-EXTRAADDR</contact:id>
               <contact:postalInfo>
                  <contact:name>Foo Bar</contact:name>
                  <contact:addr>
                     <contact:street>Kratka 42</contact:street>
                     <contact:city>Praha</contact:city>
                     <contact:pc>11150</contact:pc>
                     <contact:cc>CZ</contact:cc>
                  </contact:addr>
               </contact:postalInfo>
               <contact:email>foobar@nic.cz</contact:email>
            </contact:create>
         </create>
         <extension>
            <extra-addr:create
             xmlns:extra-addr="http://www.nic.cz/xml/epp/extra-addr-1.0"
             xsi:schemaLocation="http://www.nic.cz/xml/epp/extra-addr-1.0 extra-addr-1.0.xsd">
               <extra-addr:mailing>
                  <extra-addr:addr>
                     <extra-addr:street>Dlouha 24</extra-addr:street>
                     <extra-addr:city>Lysa nad Labem</extra-addr:city>
                     <extra-addr:pc>28922</extra-addr:pc>
                     <extra-addr:cc>CZ</extra-addr:cc>
                  </extra-addr:addr>
               </extra-addr:mailing>
            </extra-addr:create>
         </extension>
         <clTRID>hehr010#15-08-25at17:03:10</clTRID>
      </command>
   </epp>

.. code-block:: shell
   :caption: FRED-client equivalent

   > # This command does not have a FRED-client equivalent in this version.

.. index:: ⒺcreData, Ⓔid, ⒺcrDate

Response element structure
--------------------------

The :ref:`response <struct-response>` from the FRED EPP server contains
the result, response data, and transaction identification.

See also :ref:`succ-fail`.

The response data element (``<resData>``) contains a single child element
``<contact:creData>``  which declares the ``contact`` :doc:`namespace and schema </EPPReference/SchemasNamespaces/index>`,
and it contains the following child elements:

* ``<contact:id>`` **(1)** – the contact handle as :term:`fredcom:objIDType`,
* ``<contact:crDate>`` **(1)** – the :ref:`timestamp <mngobj-timestamps>` of creation as :term:`xs:dateTime`.

.. code-block:: xml
   :caption: Example

   <?xml version="1.0" encoding="UTF-8"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">
      <response>
         <result code="1000">
            <msg>Command completed successfully</msg>
         </result>
         <resData>
            <contact:creData xmlns:contact="http://www.nic.cz/xml/epp/contact-1.6"
             xsi:schemaLocation="http://www.nic.cz/xml/epp/contact-1.6 contact-1.6.1.xsd">
               <contact:id>CID-MYCONTACT</contact:id>
               <contact:crDate>2017-07-28T12:11:43+02:00</contact:crDate>
            </contact:creData>
         </resData>
         <trID>
            <clTRID>ckmf002#17-07-28at12:11:37</clTRID>
            <svTRID>ReqID-0000140980</svTRID>
         </trID>
      </response>
   </epp>

Mailing address extension
^^^^^^^^^^^^^^^^^^^^^^^^^

:ref:`Response extension <response-ext>` is not used in reply to this command.
